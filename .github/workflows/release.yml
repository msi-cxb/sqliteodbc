name: release

on:
  push:
    tags:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-release-sqliteodbc:
    runs-on: windows-latest
    steps:
        - name: checkout
          id: checkout_code
          uses: actions/checkout@v4

        - name: setup_msbuild
          id: setup_msbuild
          uses: microsoft/setup-msbuild@v2

        # - name: build 32 bit ODBC driver
        #   id: build_32_bit_ODBC_driver
        #   shell: cmd
        #   run: |
        #     buildAndInstall.bat 32 true
  
        - name: build 64 bit ODBC driver
          id: build_64_bit_ODBC_driver
          shell: cmd
          run: |
            buildAndInstall.bat 64 true
        
        # - name: include vc_redist.x86
        #   id: include_vc_redist_x86
        #   shell: cmd
        #   run: |
        #     set ARCH=x86
        #     SET VSWHERE_EXE=%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe
        #     IF NOT EXIST "%VSWHERE_EXE%" SET VSWHERE_EXE=%ProgramFiles%\Microsoft Visual Studio\Installer\vswhere.exe
        #     SET VS_WHEREIS_CMD="%VSWHERE_EXE%" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath -latest        
        #     FOR /F "delims=" %%D IN ('%VS_WHEREIS_CMD%') DO (SET VSWHEREINSTALLDIR=%%D)
        #     SET VSVARS32=%VSWHEREINSTALLDIR%\Common7\Tools\VsDevCmd.bat
        #     IF EXIST "%VSVARS32%" (
        #             set CLARG=-arch=%ARCH%
        #     )
        #     SET VSVARS32=%VSVARS32:\\=\%
        #     CALL "%VSVARS32%" %CLARG% 1>nul
        #     SET VC_REDIST=%VCINSTALLDIR%Redist\MSVC\v143\vc_redist.x86.exe
        #     set installDir=.\install\32bit
        #     mkdir %installDir%
        #     xcopy /Q /Y "%VC_REDIST%" %installDir% 1>nul

        # - name: include vc_redist.x64
        #   id: include_vc_redist_x64
        #   shell: cmd
        #   run: |
        #     set ARCH=amd64
        #     SET VSWHERE_EXE=%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe
        #     IF NOT EXIST "%VSWHERE_EXE%" SET VSWHERE_EXE=%ProgramFiles%\Microsoft Visual Studio\Installer\vswhere.exe
        #     SET VS_WHEREIS_CMD="%VSWHERE_EXE%" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath -latest        
        #     FOR /F "delims=" %%D IN ('%VS_WHEREIS_CMD%') DO (SET VSWHEREINSTALLDIR=%%D)
        #     SET VSVARS32=%VSWHEREINSTALLDIR%\Common7\Tools\VsDevCmd.bat
        #     IF EXIST "%VSVARS32%" (
        #             set CLARG=-arch=%ARCH%
        #     )
        #     SET VSVARS32=%VSVARS32:\\=\%
        #     CALL "%VSVARS32%" %CLARG% 1>nul
        #     SET VC_REDIST=%VCINSTALLDIR%Redist\MSVC\v143\vc_redist.x64.exe
        #     set installDir=.\install\64bit
        #     mkdir %installDir%
        #     xcopy /Q /Y "%VC_REDIST%" %installDir% 1>nul
  
        - name: check
          shell: cmd
          run: |
            echo ${{ github.repository }} Tag: ${{ github.ref_name }} SHA: ${{ github.sha }} > Release.txt
            xcopy /Q /Y Release.txt install 1>nul
            7z a sqliteodbc.zip install
            dir /s /b install

        # - name: release
        #   id: release
        #   uses: ncipollo/release-action@v1
        #   with:
        #     replacesArtifacts: true
        #     artifacts: "sqliteodbc.zip"
            
  virustotal:
    name: "VirusTotal Scan"
    environment: virustotal
    runs-on: ubuntu-latest
    needs: [build-and-release-sqliteodbc]
    timeout-minutes: 5

    steps:
      - name: "file listing"
        run:
          ls -R
      - name: "VirusTotal"
        uses: cssnr/virustotal-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          vt_api_key: ${{ secrets.VT_API_KEY }}
          update_release: true
          rate_limit: 4
          file_globs: |
            install/64bit/*.exe
            install/64bit/*.dll

        # - shell: cmd
        #   id: cmd
        #   run: |
        #     7z a gitactionstest_dotnet8.zip .\bin\Release\net8.0\publish\*
        #     dir /s /b 

        # - name: release
        #   uses: softprops/action-gh-release@v2
        #   if: startsWith(github.ref, 'refs/tags/')
        #   with:
        #     files: |
        #       Release.txt
        #       gitactionstest_dotnet8.zip

